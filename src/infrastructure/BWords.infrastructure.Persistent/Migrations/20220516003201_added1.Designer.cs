// <auto-generated />
using System;
using BWords.infrastructure.Persistent.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BWords.infrastructure.Persistent.Migrations
{
    [DbContext(typeof(BWordsContext))]
    [Migration("20220516003201_added1")]
    partial class added1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BWords.Api.Domain.Models.EmailConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("NewEmailAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldEmailAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EmailConfigurations");
                });

            modelBuilder.Entity("BWords.Api.Domain.Models.Entiry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreateById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreateById");

                    b.ToTable("Entiries");
                });

            modelBuilder.Entity("BWords.Api.Domain.Models.EntryComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreateById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EntiryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreateById");

                    b.HasIndex("EntiryId");

                    b.ToTable("EntryComments");
                });

            modelBuilder.Entity("BWords.Api.Domain.Models.EntryCommentFovorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreateById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntryCommandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntryCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("EntryCommentId");

                    b.ToTable("EntryCommentFovorites");
                });

            modelBuilder.Entity("BWords.Api.Domain.Models.EntryCommentVote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreateById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EntiryCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntiryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntryCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VoteType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntiryId");

                    b.HasIndex("EntryCommentId");

                    b.ToTable("EntryCommentVotes");
                });

            modelBuilder.Entity("BWords.Api.Domain.Models.EntryFovorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreateById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EntiryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EntiryId");

                    b.HasIndex("GreatedUserId");

                    b.ToTable("EntryFovorites");
                });

            modelBuilder.Entity("BWords.Api.Domain.Models.EntryVote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreateById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EntiryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntryCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VoteType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntiryId");

                    b.HasIndex("EntryCommentId");

                    b.ToTable("EntryVotes");
                });

            modelBuilder.Entity("BWords.Api.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FristName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BWords.Api.Domain.Models.EmailConfiguration", b =>
                {
                    b.HasOne("BWords.Api.Domain.Models.User", null)
                        .WithMany("EntityComments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BWords.Api.Domain.Models.Entiry", b =>
                {
                    b.HasOne("BWords.Api.Domain.Models.User", "CreateBy")
                        .WithMany("Entiries")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreateBy");
                });

            modelBuilder.Entity("BWords.Api.Domain.Models.EntryComment", b =>
                {
                    b.HasOne("BWords.Api.Domain.Models.User", "CreateBy")
                        .WithMany("EntryComments")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BWords.Api.Domain.Models.Entiry", "Entiry")
                        .WithMany("EntryComments")
                        .HasForeignKey("EntiryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreateBy");

                    b.Navigation("Entiry");
                });

            modelBuilder.Entity("BWords.Api.Domain.Models.EntryCommentFovorite", b =>
                {
                    b.HasOne("BWords.Api.Domain.Models.User", "CreatedUser")
                        .WithMany("EntityCommentFovorites")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BWords.Api.Domain.Models.EntryComment", "EntryComment")
                        .WithMany("EntityCommentFovorites")
                        .HasForeignKey("EntryCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("EntryComment");
                });

            modelBuilder.Entity("BWords.Api.Domain.Models.EntryCommentVote", b =>
                {
                    b.HasOne("BWords.Api.Domain.Models.Entiry", "Entiry")
                        .WithMany()
                        .HasForeignKey("EntiryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BWords.Api.Domain.Models.EntryComment", "EntryComment")
                        .WithMany("EntityCommentVotes")
                        .HasForeignKey("EntryCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entiry");

                    b.Navigation("EntryComment");
                });

            modelBuilder.Entity("BWords.Api.Domain.Models.EntryFovorite", b =>
                {
                    b.HasOne("BWords.Api.Domain.Models.Entiry", "Entiry")
                        .WithMany("EntityFovorites")
                        .HasForeignKey("EntiryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BWords.Api.Domain.Models.User", "GreatedUser")
                        .WithMany("EntityFovorites")
                        .HasForeignKey("GreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entiry");

                    b.Navigation("GreatedUser");
                });

            modelBuilder.Entity("BWords.Api.Domain.Models.EntryVote", b =>
                {
                    b.HasOne("BWords.Api.Domain.Models.Entiry", "Entiry")
                        .WithMany("EntityVotes")
                        .HasForeignKey("EntiryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BWords.Api.Domain.Models.EmailConfiguration", "EntryComment")
                        .WithMany()
                        .HasForeignKey("EntryCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entiry");

                    b.Navigation("EntryComment");
                });

            modelBuilder.Entity("BWords.Api.Domain.Models.Entiry", b =>
                {
                    b.Navigation("EntityFovorites");

                    b.Navigation("EntityVotes");

                    b.Navigation("EntryComments");
                });

            modelBuilder.Entity("BWords.Api.Domain.Models.EntryComment", b =>
                {
                    b.Navigation("EntityCommentFovorites");

                    b.Navigation("EntityCommentVotes");
                });

            modelBuilder.Entity("BWords.Api.Domain.Models.User", b =>
                {
                    b.Navigation("Entiries");

                    b.Navigation("EntityCommentFovorites");

                    b.Navigation("EntityComments");

                    b.Navigation("EntityFovorites");

                    b.Navigation("EntryComments");
                });
#pragma warning restore 612, 618
        }
    }
}
